- const makeElementId = (property) => `data_${property}`
- const makeElementName = (property) => `data[${property}]`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = makeElementId(propertyName)
  .form-floating.mb-3(class=(errors[propertyName] && 'has-danger'))
    input(
      id= inputId
      name= makeElementName(propertyName)
      class= classLine
      value= _.get(entity, propertyName, '')
      placeholder= t(`layouts.form.inputs.${propertyName}`)
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .form-control-feedback.invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(for= inputId)= t(`layouts.form.inputs.${propertyName}`)

mixin textarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - textareaId = makeElementId(propertyName)
  .form-floating.mb-3 
    textarea(
      id= textareaId 
      name= makeElementName(propertyName)
      class= classLine
      style='height: 100px'
      placeholder= t(`layouts.form.textarea.${propertyName}`)
    )&attributes(attributes)
      block
    if !_.isEmpty(propertyErrors)
      .form-control-feedback.invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(for= textareaId)= t(`layouts.form.textarea.${propertyName}`)

mixin select(entity, propertyName, selectItems, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - selectId = makeElementId(propertyName)
  - labelName = propertyName.replace('Id', '')
  .form-floating.mb-3 
    select(
      id= selectId
      name= makeElementName(propertyName)
      class= classLine
    )&attributes(attributes)
      option= t(`layouts.form.selects.defaults.${labelName}`)
      each item in selectItems 
        option(value=item.id selected=item.id === entity[propertyName])= item.name || item.fullName()
    if !_.isEmpty(propertyErrors)
      .form-control-feedback.invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(for= selectId)= t(`layouts.form.selects.${labelName}`)

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin actionButton(method)
    input(name='_method' type='hidden' value= method)
    input(type='submit')&attributes(attributes)
